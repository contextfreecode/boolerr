import List from "list"
import Option from "option"
import Result from "result"
import String from "string"

type Err = String

record Head {
  title: Option<String>,
}

record Doc {
  head: Option<Head>,
}

record Summary {
  title: Option<String>,
  ok: Bool,
}

let readDoc: String -> Result<Doc, Err> = url => {
  let has = text => String.contains(url, text)
  if (has("fail")) Err("Bad read of " ++ url)
  else Ok(
    match (void) {
      _ when has("head-missing") => { head: None, },
      _ when has("title-missing") => { head: Some({ title: None, }), },
      _ when has("title-empty") => { head: Some({ title: Some(""), }), },
      _ => { head: Some({ title: Some("Title of url"), }), },
    }
  )
}

let buildSummary: Doc -> Summary = doc => {
  let title = Option.flatMap((head: Head) => head.title, doc.head)
  { title, ok: true }
}

let readAndBuildSummary: String -> Summary = url =>
  match (readDoc(url)) {
    Ok(doc) => buildSummary(doc),
    Err(_) => { title: None, ok: false },
  }

let isTitleNonEmpty: Doc -> Option<Bool> = doc =>
  Option.flatMap((head: Head) =>
    Option.map(title => String.length(title) > 0, head.title), doc.head)

let readWhetherTitleNonEmpty: String -> Result<Option<Bool>, Err> = url =>
  Result.map(doc => isTitleNonEmpty(doc), readDoc(url))

let main = () => {
  let printAll = strings => print(List.join(" ", strings))
  let urls = ["good", "title-empty", "title-missing", "head-missing", "fail"]
  List.forEach(url => {
    print(List.join("", ["-- Checking \"https://", url, "\" --"]))
    // Summary.
    let summary = readAndBuildSummary(url)
    printAll(["Summary:", toString(summary)])
    printAll(["Title:", Option.unwrapWithDefault("", summary.title)])
    // Has title.
    let hasTitle = readWhetherTitleNonEmpty(url)
    let hasTitleSure = Option.unwrapWithDefault(
      false,
      Option.flatten(Result.toOption(hasTitle))
    )
    printAll(["Has title:", toString(hasTitle), "vs", toString(hasTitleSure)])
  }, urls)
}

main()
